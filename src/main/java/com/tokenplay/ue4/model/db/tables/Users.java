/*
 * This file is generated by jOOQ.
 */
package com.tokenplay.ue4.model.db.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import com.tokenplay.ue4.model.db.DefaultSchema;
import com.tokenplay.ue4.model.db.Indexes;
import com.tokenplay.ue4.model.db.Keys;
import com.tokenplay.ue4.model.db.tables.records.UsersRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(value = {
    "http://www.jooq.org", "jOOQ version:3.10.6"}, comments = "This class is generated by jOOQ")
@SuppressWarnings({
    "all", "unchecked", "rawtypes"})
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = 119600510;

    /**
     * The reference instance of <code>users</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>users.id</code>.
     */
    public final TableField<UsersRecord, Long> ID = createField(
        "id",
        org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(
            org.jooq.impl.DSL.field("nextval('users_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>users.profile_id</code>.
     */
    public final TableField<UsersRecord, Long> PROFILE_ID = createField("profile_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>users.email</code>.
     */
    public final TableField<UsersRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>users.password</code>.
     */
    public final TableField<UsersRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>users.role</code>.
     */
    public final TableField<UsersRecord, Long> ROLE = createField("role",
        org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>users.active</code>.
     */
    public final TableField<UsersRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>users.eula</code>.
     */
    public final TableField<UsersRecord, Boolean> EULA = createField("eula",
        org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>users.role_id</code>.
     */
    public final TableField<UsersRecord, Long> ROLE_ID = createField("role_id",
        org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("(1)::bigint", org.jooq.impl.SQLDataType.BIGINT)),
        this, "");

    /**
     * The column <code>users.firstname</code>.
     */
    public final TableField<UsersRecord, String> FIRSTNAME = createField("firstname", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>users.lastname</code>.
     */
    public final TableField<UsersRecord, String> LASTNAME = createField("lastname", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>users.language</code>.
     */
    public final TableField<UsersRecord, String> LANGUAGE = createField("language", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>users.deleted</code>.
     */
    public final TableField<UsersRecord, Integer> DELETED = createField("deleted",
        org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>users.created_at</code>.
     */
    public final TableField<UsersRecord, OffsetDateTime> CREATED_AT = createField("created_at",
        org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>users.updated_at</code>.
     */
    public final TableField<UsersRecord, OffsetDateTime> UPDATED_AT = createField("updated_at",
        org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>users.remember_token</code>.
     */
    public final TableField<UsersRecord, String> REMEMBER_TOKEN = createField("remember_token", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>users.referred_by_code</code>.
     */
    public final TableField<UsersRecord, String> REFERRED_BY_CODE = createField("referred_by_code", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>users.confirmation_code</code>.
     */
    public final TableField<UsersRecord, String> CONFIRMATION_CODE = createField("confirmation_code", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>users.mod</code>.
     */
    public final TableField<UsersRecord, Long> MOD = createField("mod", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>users.alpha</code>.
     */
    public final TableField<UsersRecord, Boolean> ALPHA = createField("alpha",
        org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>users.nda</code>.
     */
    public final TableField<UsersRecord, Boolean> NDA = createField("nda",
        org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>users.tec</code>.
     */
    public final TableField<UsersRecord, Integer> TEC = createField("tec", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>users.steam_id</code>.
     */
    public final TableField<UsersRecord, String> STEAM_ID = createField("steam_id", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>users</code> table reference
     */
    public Users() {
        this(DSL.name("users"), null);
    }

    /**
     * Create an aliased <code>users</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>users</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USERS_EMAIL_KEY, Indexes.USERS_PKEY, Indexes.USERS_STEAM_ID_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UsersRecord, Long> getIdentity() {
        return Keys.IDENTITY_USERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.USERS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UsersRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersRecord>>asList(Keys.USERS_PKEY, Keys.USERS_EMAIL_KEY, Keys.USERS_STEAM_ID_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }
}
