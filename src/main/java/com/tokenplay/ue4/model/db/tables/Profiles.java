/*
 * This file is generated by jOOQ.
 */
package com.tokenplay.ue4.model.db.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import com.tokenplay.ue4.model.db.DefaultSchema;
import com.tokenplay.ue4.model.db.Indexes;
import com.tokenplay.ue4.model.db.Keys;
import com.tokenplay.ue4.model.db.tables.records.ProfilesRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(value = {
    "http://www.jooq.org", "jOOQ version:3.10.6"}, comments = "This class is generated by jOOQ")
@SuppressWarnings({
    "all", "unchecked", "rawtypes"})
public class Profiles extends TableImpl<ProfilesRecord> {

    private static final long serialVersionUID = 1987641450;

    /**
     * The reference instance of <code>profiles</code>
     */
    public static final Profiles PROFILES = new Profiles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfilesRecord> getRecordType() {
        return ProfilesRecord.class;
    }

    /**
     * The column <code>profiles.id</code>.
     */
    public final TableField<ProfilesRecord, Long> ID = createField(
        "id",
        org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(
            org.jooq.impl.DSL.field("nextval('profiles_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>profiles.user_id</code>.
     */
    public final TableField<ProfilesRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>profiles.callsign</code>.
     */
    public final TableField<ProfilesRecord, String> CALLSIGN = createField("callsign", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>profiles.bio</code>.
     */
    public final TableField<ProfilesRecord, String> BIO = createField("bio", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>profiles.location</code>.
     */
    public final TableField<ProfilesRecord, String> LOCATION = createField("location", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>profiles.created_at</code>.
     */
    public final TableField<ProfilesRecord, OffsetDateTime> CREATED_AT = createField("created_at",
        org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>profiles.updated_at</code>.
     */
    public final TableField<ProfilesRecord, OffsetDateTime> UPDATED_AT = createField("updated_at",
        org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * Create a <code>profiles</code> table reference
     */
    public Profiles() {
        this(DSL.name("profiles"), null);
    }

    /**
     * Create an aliased <code>profiles</code> table reference
     */
    public Profiles(String alias) {
        this(DSL.name(alias), PROFILES);
    }

    /**
     * Create an aliased <code>profiles</code> table reference
     */
    public Profiles(Name alias) {
        this(alias, PROFILES);
    }

    private Profiles(Name alias, Table<ProfilesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Profiles(Name alias, Table<ProfilesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROFILES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProfilesRecord, Long> getIdentity() {
        return Keys.IDENTITY_PROFILES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProfilesRecord> getPrimaryKey() {
        return Keys.PROFILES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProfilesRecord>> getKeys() {
        return Arrays.<UniqueKey<ProfilesRecord>>asList(Keys.PROFILES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Profiles as(String alias) {
        return new Profiles(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Profiles as(Name alias) {
        return new Profiles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Profiles rename(String name) {
        return new Profiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Profiles rename(Name name) {
        return new Profiles(name, null);
    }
}
