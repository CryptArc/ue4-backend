/*
 * This file is generated by jOOQ.
 */
package com.tokenplay.ue4.model.db.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import com.tokenplay.ue4.model.db.DefaultSchema;
import com.tokenplay.ue4.model.db.Indexes;
import com.tokenplay.ue4.model.db.Keys;
import com.tokenplay.ue4.model.db.tables.records.BmAccountmasterRecord;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(value = {
    "http://www.jooq.org", "jOOQ version:3.10.6"}, comments = "This class is generated by jOOQ")
@SuppressWarnings({
    "all", "unchecked", "rawtypes"})
public class Tue4BmAccountmaster extends TableImpl<BmAccountmasterRecord> {

    private static final long serialVersionUID = 1156821045;

    /**
     * The reference instance of <code>tue4_bm_accountmaster</code>
     */
    public static final Tue4BmAccountmaster BM_ACCOUNTMASTER = new Tue4BmAccountmaster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BmAccountmasterRecord> getRecordType() {
        return BmAccountmasterRecord.class;
    }

    /**
     * The column <code>tue4_bm_accountmaster.bm_accountmaster_id</code>.
     */
    public final TableField<BmAccountmasterRecord, String> BM_ACCOUNTMASTER_ID = createField("bm_accountmaster_id", org.jooq.impl.SQLDataType
        .CHAR(32).nullable(false), this, "");

    /**
     * The column <code>tue4_bm_accountmaster.bm_accounttype</code>.
     */
    public final TableField<BmAccountmasterRecord, String> BM_ACCOUNTTYPE = createField("bm_accounttype", org.jooq.impl.SQLDataType.VARCHAR(255)
        .nullable(false), this, "");

    /**
     * The column <code>tue4_bm_accountmaster.bm_prefix</code>.
     */
    public final TableField<BmAccountmasterRecord, String> BM_PREFIX = createField("bm_prefix", org.jooq.impl.SQLDataType.VARCHAR(255)
        .nullable(false), this, "");

    /**
     * The column <code>tue4_bm_accountmaster.bm_minbalance</code>.
     */
    public final TableField<BmAccountmasterRecord, Double> BM_MINBALANCE = createField("bm_minbalance",
        org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>tue4_bm_accountmaster.bm_interest</code>.
     */
    public final TableField<BmAccountmasterRecord, Double> BM_INTEREST = createField("bm_interest", org.jooq.impl.SQLDataType.DOUBLE.nullable(false),
        this, "");

    /**
     * The column <code>tue4_bm_accountmaster.created_at</code>.
     */
    public final TableField<BmAccountmasterRecord, Timestamp> CREATED_AT = createField("created_at",
        org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>tue4_bm_accountmaster.updated_at</code>.
     */
    public final TableField<BmAccountmasterRecord, Timestamp> UPDATED_AT = createField("updated_at",
        org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>tue4_bm_accountmaster</code> table reference
     */
    public Tue4BmAccountmaster() {
        this(DSL.name("tue4_bm_accountmaster"), null);
    }

    /**
     * Create an aliased <code>tue4_bm_accountmaster</code> table reference
     */
    public Tue4BmAccountmaster(String alias) {
        this(DSL.name(alias), BM_ACCOUNTMASTER);
    }

    /**
     * Create an aliased <code>tue4_bm_accountmaster</code> table reference
     */
    public Tue4BmAccountmaster(Name alias) {
        this(alias, BM_ACCOUNTMASTER);
    }

    private Tue4BmAccountmaster(Name alias, Table<BmAccountmasterRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tue4BmAccountmaster(Name alias, Table<BmAccountmasterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BM_ACCOUNTMASTER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BmAccountmasterRecord> getPrimaryKey() {
        return Keys.BM_ACCOUNTMASTER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BmAccountmasterRecord>> getKeys() {
        return Arrays.<UniqueKey<BmAccountmasterRecord>>asList(Keys.BM_ACCOUNTMASTER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tue4BmAccountmaster as(String alias) {
        return new Tue4BmAccountmaster(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tue4BmAccountmaster as(Name alias) {
        return new Tue4BmAccountmaster(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tue4BmAccountmaster rename(String name) {
        return new Tue4BmAccountmaster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tue4BmAccountmaster rename(Name name) {
        return new Tue4BmAccountmaster(name, null);
    }
}
