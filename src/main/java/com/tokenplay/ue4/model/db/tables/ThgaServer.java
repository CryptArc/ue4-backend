/*
 * This file is generated by jOOQ.
 */
package com.tokenplay.ue4.model.db.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import com.tokenplay.ue4.model.db.DefaultSchema;
import com.tokenplay.ue4.model.db.Indexes;
import com.tokenplay.ue4.model.db.Keys;
import com.tokenplay.ue4.model.db.tables.records.ServerRecord;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(value = {
    "http://www.jooq.org", "jOOQ version:3.10.6"}, comments = "This class is generated by jOOQ")
@SuppressWarnings({
    "all", "unchecked", "rawtypes"})
public class Tue4Server extends TableImpl<ServerRecord> {

    private static final long serialVersionUID = -656669720;

    /**
     * The reference instance of <code>tue4_server</code>
     */
    public static final Tue4Server SERVER = new Tue4Server();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServerRecord> getRecordType() {
        return ServerRecord.class;
    }

    /**
     * The column <code>tue4_server.srv_id</code>.
     */
    public final TableField<ServerRecord, String> SRV_ID = createField("srv_id", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tue4_server.srv_name</code>.
     */
    public final TableField<ServerRecord, String> SRV_NAME = createField("srv_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tue4_server.srv_status</code>.
     */
    public final TableField<ServerRecord, String> SRV_STATUS =
        createField("srv_status",
            org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("'OFF'::text", org.jooq.impl.SQLDataType.CLOB)),
            this, "");

    /**
     * The column <code>tue4_server.srv_ip</code>.
     */
    public final TableField<ServerRecord, String> SRV_IP = createField("srv_ip", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tue4_server.srv_description</code>.
     */
    public final TableField<ServerRecord, String> SRV_DESCRIPTION = createField("srv_description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tue4_server.srv_alias</code>.
     */
    public final TableField<ServerRecord, String> SRV_ALIAS = createField("srv_alias", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tue4_server.srv_last_check</code>.
     */
    public final TableField<ServerRecord, OffsetDateTime> SRV_LAST_CHECK = createField("srv_last_check",
        org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>tue4_server.srv_ue4_port</code>.
     */
    public final TableField<ServerRecord, String> SRV_UE4_PORT = createField("srv_ue4_port", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tue4_server.srv_zmq_port</code>.
     */
    public final TableField<ServerRecord, String> SRV_ZMQ_PORT = createField("srv_zmq_port", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tue4_server.srv_max_players</code>.
     */
    public final TableField<ServerRecord, Long> SRV_MAX_PLAYERS = createField("srv_max_players", org.jooq.impl.SQLDataType.BIGINT.nullable(false)
        .defaultValue(org.jooq.impl.DSL.field("(10)::bigint", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>tue4_server.srv_running_version</code>.
     */
    public final TableField<ServerRecord, String> SRV_RUNNING_VERSION = createField("srv_running_version", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tue4_server.srv_use_cycle</code>.
     */
    public final TableField<ServerRecord, Boolean> SRV_USE_CYCLE = createField("srv_use_cycle", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false)
        .defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>tue4_server.srv_sanctioned</code>.
     */
    public final TableField<ServerRecord, Boolean> SRV_SANCTIONED = createField("srv_sanctioned", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false)
        .defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>tue4_server.srv_visible</code>.
     */
    public final TableField<ServerRecord, Boolean> SRV_VISIBLE = createField("srv_visible", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false)
        .defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>tue4_server.srv_pil_id</code>.
     */
    public final TableField<ServerRecord, String> SRV_PIL_ID = createField("srv_pil_id", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tue4_server.srv_last_use</code>.
     */
    public final TableField<ServerRecord, OffsetDateTime> SRV_LAST_USE = createField("srv_last_use", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE
        .nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>tue4_server.srv_mch_id</code>.
     */
    public final TableField<ServerRecord, String> SRV_MCH_ID = createField("srv_mch_id", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tue4_server.srv_development</code>.
     */
    public final TableField<ServerRecord, Boolean> SRV_DEVELOPMENT = createField("srv_development", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false)
        .defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>tue4_server.srv_use_custom_cycle</code>.
     */
    public final TableField<ServerRecord, Boolean> SRV_USE_CUSTOM_CYCLE = createField("srv_use_custom_cycle", org.jooq.impl.SQLDataType.BOOLEAN
        .nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>tue4_server.srv_cha_id</code>.
     */
    public final TableField<ServerRecord, String> SRV_CHA_ID = createField("srv_cha_id", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tue4_server.srv_max_bots</code>.
     */
    public final TableField<ServerRecord, Long> SRV_MAX_BOTS = createField("srv_max_bots", org.jooq.impl.SQLDataType.BIGINT.nullable(false)
        .defaultValue(org.jooq.impl.DSL.field("(5)::bigint", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>tue4_server.srv_match_time</code>.
     */
    public final TableField<ServerRecord, Long> SRV_MATCH_TIME = createField("srv_match_time", org.jooq.impl.SQLDataType.BIGINT.nullable(false)
        .defaultValue(org.jooq.impl.DSL.field("(30)::bigint", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>tue4_server.srv_map_cycle_last_index</code>.
     */
    public final TableField<ServerRecord, Long> SRV_MAP_CYCLE_LAST_INDEX = createField("srv_map_cycle_last_index", org.jooq.impl.SQLDataType.BIGINT,
        this, "");

    /**
     * The column <code>tue4_server.srv_shuffle</code>.
     */
    public final TableField<ServerRecord, Boolean> SRV_SHUFFLE = createField("srv_shuffle", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>tue4_server.srv_cyclelist</code>.
     */
    public final TableField<ServerRecord, String> SRV_CYCLELIST = createField("srv_cyclelist", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tue4_server.srv_override_map_player_count</code>.
     */
    public final TableField<ServerRecord, Long> SRV_OVERRIDE_MAP_PLAYER_COUNT = createField("srv_override_map_player_count",
        org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tue4_server.srv_default_map_time_limit</code>.
     */
    public final TableField<ServerRecord, Long> SRV_DEFAULT_MAP_TIME_LIMIT = createField("srv_default_map_time_limit",
        org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tue4_server.srv_num_players</code>.
     */
    public final TableField<ServerRecord, Long> SRV_NUM_PLAYERS = createField("srv_num_players", org.jooq.impl.SQLDataType.BIGINT.nullable(false)
        .defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>tue4_server.srv_zone</code>.
     */
    public final TableField<ServerRecord, String> SRV_ZONE = createField("srv_zone", org.jooq.impl.SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>tue4_server.srv_password</code>.
     */
    public final TableField<ServerRecord, String> SRV_PASSWORD = createField("srv_password", org.jooq.impl.SQLDataType.VARCHAR(75), this, "");

    /**
     * Create a <code>tue4_server</code> table reference
     */
    public Tue4Server() {
        this(DSL.name("tue4_server"), null);
    }

    /**
     * Create an aliased <code>tue4_server</code> table reference
     */
    public Tue4Server(String alias) {
        this(DSL.name(alias), SERVER);
    }

    /**
     * Create an aliased <code>tue4_server</code> table reference
     */
    public Tue4Server(Name alias) {
        this(alias, SERVER);
    }

    private Tue4Server(Name alias, Table<ServerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tue4Server(Name alias, Table<ServerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_16781_Kue4_MCH_SRV_FK, Indexes.IDX_16781_Kue4_SRV_CHA_FK_IDX, Indexes.IDX_16781_Kue4_SRV_PIL_FK,
            Indexes.SERVER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ServerRecord> getPrimaryKey() {
        return Keys.SERVER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ServerRecord>> getKeys() {
        return Arrays.<UniqueKey<ServerRecord>>asList(Keys.SERVER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tue4Server as(String alias) {
        return new Tue4Server(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tue4Server as(Name alias) {
        return new Tue4Server(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tue4Server rename(String name) {
        return new Tue4Server(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tue4Server rename(Name name) {
        return new Tue4Server(name, null);
    }
}
