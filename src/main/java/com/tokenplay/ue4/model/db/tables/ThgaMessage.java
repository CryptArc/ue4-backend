/*
 * This file is generated by jOOQ.
 */
package com.tokenplay.ue4.model.db.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import com.tokenplay.ue4.model.db.DefaultSchema;
import com.tokenplay.ue4.model.db.Indexes;
import com.tokenplay.ue4.model.db.Keys;
import com.tokenplay.ue4.model.db.tables.records.MessageRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(value = {
    "http://www.jooq.org", "jOOQ version:3.10.6"}, comments = "This class is generated by jOOQ")
@SuppressWarnings({
    "all", "unchecked", "rawtypes"})
public class Tue4Message extends TableImpl<MessageRecord> {

    private static final long serialVersionUID = 615137283;

    /**
     * The reference instance of <code>tue4_message</code>
     */
    public static final Tue4Message MESSAGE = new Tue4Message();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageRecord> getRecordType() {
        return MessageRecord.class;
    }

    /**
     * The column <code>tue4_message.msg_id</code>.
     */
    public final TableField<MessageRecord, UUID> MSG_ID = createField("msg_id",
        org.jooq.impl.SQLDataType.UUID.nullable(false).defaultValue(org.jooq.impl.DSL.field("uuid_generate_v4()", org.jooq.impl.SQLDataType.UUID)),
        this, "");

    /**
     * The column <code>tue4_message.msg_sender</code>.
     */
    public final TableField<MessageRecord, String> MSG_SENDER = createField("msg_sender", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tue4_message.msg_recipient</code>.
     */
    public final TableField<MessageRecord, String> MSG_RECIPIENT = createField("msg_recipient", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tue4_message.msg_type</code>.
     */
    public final TableField<MessageRecord, Integer> MSG_TYPE = createField("msg_type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>tue4_message.msg_time</code>.
     */
    public final TableField<MessageRecord, OffsetDateTime> MSG_TIME = createField("msg_time", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this,
        "");

    /**
     * The column <code>tue4_message.msg_expiration</code>.
     */
    public final TableField<MessageRecord, Float> MSG_EXPIRATION = createField("msg_expiration", org.jooq.impl.SQLDataType.REAL, this, "");

    /**
     * The column <code>tue4_message.msg_payload</code>.
     */
    public final TableField<MessageRecord, String> MSG_PAYLOAD = createField("msg_payload", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tue4_message.msg_delivered</code>.
     */
    public final TableField<MessageRecord, Boolean> MSG_DELIVERED = createField("msg_delivered", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * Create a <code>tue4_message</code> table reference
     */
    public Tue4Message() {
        this(DSL.name("tue4_message"), null);
    }

    /**
     * Create an aliased <code>tue4_message</code> table reference
     */
    public Tue4Message(String alias) {
        this(DSL.name(alias), MESSAGE);
    }

    /**
     * Create an aliased <code>tue4_message</code> table reference
     */
    public Tue4Message(Name alias) {
        this(alias, MESSAGE);
    }

    private Tue4Message(Name alias, Table<MessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tue4Message(Name alias, Table<MessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MESSAGE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MessageRecord> getPrimaryKey() {
        return Keys.MESSAGE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MessageRecord>> getKeys() {
        return Arrays.<UniqueKey<MessageRecord>>asList(Keys.MESSAGE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MessageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MessageRecord, ?>>asList(Keys.MESSAGE__FK_SENDER, Keys.MESSAGE__FK_RECIPIENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tue4Message as(String alias) {
        return new Tue4Message(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tue4Message as(Name alias) {
        return new Tue4Message(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tue4Message rename(String name) {
        return new Tue4Message(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tue4Message rename(Name name) {
        return new Tue4Message(name, null);
    }
}
