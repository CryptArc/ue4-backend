/*
 * This file is generated by jOOQ.
 */
package com.tokenplay.ue4.model.db.tables;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import com.tokenplay.ue4.model.db.DefaultSchema;
import com.tokenplay.ue4.model.db.Indexes;
import com.tokenplay.ue4.model.db.Keys;
import com.tokenplay.ue4.model.db.tables.records.ProductsRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(value = {
    "http://www.jooq.org", "jOOQ version:3.10.6"}, comments = "This class is generated by jOOQ")
@SuppressWarnings({
    "all", "unchecked", "rawtypes"})
public class Products extends TableImpl<ProductsRecord> {

    private static final long serialVersionUID = 205844564;

    /**
     * The reference instance of <code>products</code>
     */
    public static final Products PRODUCTS = new Products();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductsRecord> getRecordType() {
        return ProductsRecord.class;
    }

    /**
     * The column <code>products.id</code>.
     */
    public final TableField<ProductsRecord, Long> ID = createField(
        "id",
        org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(
            org.jooq.impl.DSL.field("nextval('products_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>products.product_category_id</code>.
     */
    public final TableField<ProductsRecord, Long> PRODUCT_CATEGORY_ID =
        createField("product_category_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>products.title</code>.
     */
    public final TableField<ProductsRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>products.price</code>.
     */
    public final TableField<ProductsRecord, BigDecimal> PRICE = createField("price", org.jooq.impl.SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>products.thumb_image</code>.
     */
    public final TableField<ProductsRecord, String> THUMB_IMAGE = createField("thumb_image", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>products.main_image</code>.
     */
    public final TableField<ProductsRecord, String> MAIN_IMAGE = createField("main_image", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>products.description</code>.
     */
    public final TableField<ProductsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>products.position</code>.
     */
    public final TableField<ProductsRecord, Long> POSITION = createField("position", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>products.created_at</code>.
     */
    public final TableField<ProductsRecord, OffsetDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE,
        this, "");

    /**
     * The column <code>products.updated_at</code>.
     */
    public final TableField<ProductsRecord, OffsetDateTime> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE,
        this, "");

    /**
     * The column <code>products.mini_description</code>.
     */
    public final TableField<ProductsRecord, String> MINI_DESCRIPTION = createField("mini_description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>products.initial_tec</code>.
     */
    public final TableField<ProductsRecord, BigDecimal> INITIAL_TEC = createField("initial_tec", org.jooq.impl.SQLDataType.NUMERIC(15, 5), this, "");

    /**
     * Create a <code>products</code> table reference
     */
    public Products() {
        this(DSL.name("products"), null);
    }

    /**
     * Create an aliased <code>products</code> table reference
     */
    public Products(String alias) {
        this(DSL.name(alias), PRODUCTS);
    }

    /**
     * Create an aliased <code>products</code> table reference
     */
    public Products(Name alias) {
        this(alias, PRODUCTS);
    }

    private Products(Name alias, Table<ProductsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Products(Name alias, Table<ProductsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_16499_ID_UNIQUE, Indexes.PRODUCTS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProductsRecord, Long> getIdentity() {
        return Keys.IDENTITY_PRODUCTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProductsRecord> getPrimaryKey() {
        return Keys.PRODUCTS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProductsRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductsRecord>>asList(Keys.PRODUCTS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Products as(String alias) {
        return new Products(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Products as(Name alias) {
        return new Products(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(String name) {
        return new Products(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(Name name) {
        return new Products(name, null);
    }
}
