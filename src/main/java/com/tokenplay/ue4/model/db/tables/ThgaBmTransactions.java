/*
 * This file is generated by jOOQ.
 */
package com.tokenplay.ue4.model.db.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import com.tokenplay.ue4.model.db.DefaultSchema;
import com.tokenplay.ue4.model.db.Indexes;
import com.tokenplay.ue4.model.db.Keys;
import com.tokenplay.ue4.model.db.tables.records.BmTransactionsRecord;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(value = {
    "http://www.jooq.org", "jOOQ version:3.10.6"}, comments = "This class is generated by jOOQ")
@SuppressWarnings({
    "all", "unchecked", "rawtypes"})
public class Tue4BmTransactions extends TableImpl<BmTransactionsRecord> {

    private static final long serialVersionUID = 300719129;

    /**
     * The reference instance of <code>tue4_bm_transactions</code>
     */
    public static final Tue4BmTransactions BM_TRANSACTIONS = new Tue4BmTransactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BmTransactionsRecord> getRecordType() {
        return BmTransactionsRecord.class;
    }

    /**
     * The column <code>tue4_bm_transactions.bm_transactions_id</code>.
     */
    public final TableField<BmTransactionsRecord, String> BM_TRANSACTIONS_ID = createField("bm_transactions_id", org.jooq.impl.SQLDataType.CHAR(32)
        .nullable(false), this, "");

    /**
     * The column <code>tue4_bm_transactions.bm_transfer_id</code>.
     */
    public final TableField<BmTransactionsRecord, String> BM_TRANSFER_ID = createField("bm_transfer_id",
        org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "");

    /**
     * The column <code>tue4_bm_transactions.bm_accounts_id</code>.
     */
    public final TableField<BmTransactionsRecord, String> BM_ACCOUNTS_ID = createField("bm_accounts_id",
        org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "");

    /**
     * The column <code>tue4_bm_transactions.bm_amount</code>.
     */
    public final TableField<BmTransactionsRecord, Double> BM_AMOUNT = createField("bm_amount", org.jooq.impl.SQLDataType.DOUBLE.nullable(false),
        this, "");

    /**
     * The column <code>tue4_bm_transactions.bm_paymentstatus</code>.
     */
    public final TableField<BmTransactionsRecord, String> BM_PAYMENTSTATUS = createField("bm_paymentstatus", org.jooq.impl.SQLDataType.VARCHAR(255)
        .nullable(false), this, "");

    /**
     * The column <code>tue4_bm_transactions.created_at</code>.
     */
    public final TableField<BmTransactionsRecord, Timestamp> CREATED_AT = createField("created_at",
        org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)),
        this, "");

    /**
     * The column <code>tue4_bm_transactions.updated_at</code>.
     */
    public final TableField<BmTransactionsRecord, Timestamp> UPDATED_AT = createField("updated_at",
        org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)),
        this, "");

    /**
     * The column <code>tue4_bm_transactions.bm_asset_id</code>.
     */
    public final TableField<BmTransactionsRecord, String> BM_ASSET_ID = createField("bm_asset_id", org.jooq.impl.SQLDataType.CHAR(32), this, "");

    /**
     * Create a <code>tue4_bm_transactions</code> table reference
     */
    public Tue4BmTransactions() {
        this(DSL.name("tue4_bm_transactions"), null);
    }

    /**
     * Create an aliased <code>tue4_bm_transactions</code> table reference
     */
    public Tue4BmTransactions(String alias) {
        this(DSL.name(alias), BM_TRANSACTIONS);
    }

    /**
     * Create an aliased <code>tue4_bm_transactions</code> table reference
     */
    public Tue4BmTransactions(Name alias) {
        this(alias, BM_TRANSACTIONS);
    }

    private Tue4BmTransactions(Name alias, Table<BmTransactionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tue4BmTransactions(Name alias, Table<BmTransactionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BM_TRANSACTIONS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BmTransactionsRecord> getPrimaryKey() {
        return Keys.BM_TRANSACTIONS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BmTransactionsRecord>> getKeys() {
        return Arrays.<UniqueKey<BmTransactionsRecord>>asList(Keys.BM_TRANSACTIONS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tue4BmTransactions as(String alias) {
        return new Tue4BmTransactions(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tue4BmTransactions as(Name alias) {
        return new Tue4BmTransactions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tue4BmTransactions rename(String name) {
        return new Tue4BmTransactions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tue4BmTransactions rename(Name name) {
        return new Tue4BmTransactions(name, null);
    }
}
