/*
 * This file is generated by jOOQ.
 */
package com.tokenplay.ue4.model.db.tables;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import com.tokenplay.ue4.model.db.DefaultSchema;
import com.tokenplay.ue4.model.db.Indexes;
import com.tokenplay.ue4.model.db.Keys;
import com.tokenplay.ue4.model.db.tables.records.OrdersRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(value = {
    "http://www.jooq.org", "jOOQ version:3.10.6"}, comments = "This class is generated by jOOQ")
@SuppressWarnings({
    "all", "unchecked", "rawtypes"})
public class Orders extends TableImpl<OrdersRecord> {

    private static final long serialVersionUID = 446904558;

    /**
     * The reference instance of <code>orders</code>
     */
    public static final Orders ORDERS = new Orders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersRecord> getRecordType() {
        return OrdersRecord.class;
    }

    /**
     * The column <code>orders.id</code>.
     */
    public final TableField<OrdersRecord, Long> ID = createField(
        "id",
        org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(
            org.jooq.impl.DSL.field("nextval('orders_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>orders.user_id</code>.
     */
    public final TableField<OrdersRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>orders.billing_id</code>.
     */
    public final TableField<OrdersRecord, Long> BILLING_ID = createField("billing_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>orders.shipping_id</code>.
     */
    public final TableField<OrdersRecord, Long> SHIPPING_ID = createField("shipping_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>orders.total</code>.
     */
    public final TableField<OrdersRecord, BigDecimal> TOTAL = createField("total", org.jooq.impl.SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>orders.status</code>.
     */
    public final TableField<OrdersRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>orders.processor</code>.
     */
    public final TableField<OrdersRecord, String> PROCESSOR = createField("processor", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>orders.created_at</code>.
     */
    public final TableField<OrdersRecord, OffsetDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE,
        this, "");

    /**
     * The column <code>orders.updated_at</code>.
     */
    public final TableField<OrdersRecord, OffsetDateTime> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE,
        this, "");

    /**
     * The column <code>orders.equipment_processed_at</code>.
     */
    public final TableField<OrdersRecord, OffsetDateTime> EQUIPMENT_PROCESSED_AT = createField("equipment_processed_at",
        org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * Create a <code>orders</code> table reference
     */
    public Orders() {
        this(DSL.name("orders"), null);
    }

    /**
     * Create an aliased <code>orders</code> table reference
     */
    public Orders(String alias) {
        this(DSL.name(alias), ORDERS);
    }

    /**
     * Create an aliased <code>orders</code> table reference
     */
    public Orders(Name alias) {
        this(alias, ORDERS);
    }

    private Orders(Name alias, Table<OrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Orders(Name alias, Table<OrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_16456_ID_UNIQUE, Indexes.ORDERS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OrdersRecord, Long> getIdentity() {
        return Keys.IDENTITY_ORDERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrdersRecord> getPrimaryKey() {
        return Keys.ORDERS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrdersRecord>> getKeys() {
        return Arrays.<UniqueKey<OrdersRecord>>asList(Keys.ORDERS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Orders as(String alias) {
        return new Orders(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Orders as(Name alias) {
        return new Orders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(String name) {
        return new Orders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(Name name) {
        return new Orders(name, null);
    }
}
