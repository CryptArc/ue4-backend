/*
 * This file is generated by jOOQ.
 */
package com.tokenplay.ue4.model.db.tables.pojos;


import java.io.Serializable;
import java.time.OffsetDateTime;

import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;


/**
 * This class is generated by jOOQ.
 */
@Generated(value = {
    "http://www.jooq.org", "jOOQ version:3.10.6"}, comments = "This class is generated by jOOQ")
@SuppressWarnings({
    "all", "unchecked", "rawtypes"})
public class Server implements Serializable {

    private static final long serialVersionUID = 2002832519;

    private String id;
    private String name;
    private String status;
    private String ip;
    private String description;
    private String alias;
    private OffsetDateTime lastCheck;
    private String ue4Port;
    private String zmqPort;
    private Long maxPlayers;
    private String runningVersion;
    private Boolean useCycle;
    private Boolean sanctioned;
    private Boolean visible;
    private String pilId;
    private OffsetDateTime lastUse;
    private String mchId;
    private Boolean development;
    private Boolean useCustomCycle;
    private String chaId;
    private Long maxBots;
    private Long matchTime;
    private Long mapCycleLastIndex;
    private Boolean shuffle;
    private String cyclelist;
    private Long overrideMapPlayerCount;
    private Long defaultMapTimeLimit;
    private Long numPlayers;
    private String zone;
    private String password;

    public Server() {
    }

    public Server(Server value) {
        this.id = value.id;
        this.name = value.name;
        this.status = value.status;
        this.ip = value.ip;
        this.description = value.description;
        this.alias = value.alias;
        this.lastCheck = value.lastCheck;
        this.ue4Port = value.ue4Port;
        this.zmqPort = value.zmqPort;
        this.maxPlayers = value.maxPlayers;
        this.runningVersion = value.runningVersion;
        this.useCycle = value.useCycle;
        this.sanctioned = value.sanctioned;
        this.visible = value.visible;
        this.pilId = value.pilId;
        this.lastUse = value.lastUse;
        this.mchId = value.mchId;
        this.development = value.development;
        this.useCustomCycle = value.useCustomCycle;
        this.chaId = value.chaId;
        this.maxBots = value.maxBots;
        this.matchTime = value.matchTime;
        this.mapCycleLastIndex = value.mapCycleLastIndex;
        this.shuffle = value.shuffle;
        this.cyclelist = value.cyclelist;
        this.overrideMapPlayerCount = value.overrideMapPlayerCount;
        this.defaultMapTimeLimit = value.defaultMapTimeLimit;
        this.numPlayers = value.numPlayers;
        this.zone = value.zone;
        this.password = value.password;
    }

    public Server(String id, String name, String status, String ip, String description, String alias, OffsetDateTime lastCheck, String ue4Port,
        String zmqPort, Long maxPlayers, String runningVersion, Boolean useCycle, Boolean sanctioned, Boolean visible, String pilId,
        OffsetDateTime lastUse, String mchId, Boolean development, Boolean useCustomCycle, String chaId, Long maxBots, Long matchTime,
        Long mapCycleLastIndex, Boolean shuffle, String cyclelist, Long overrideMapPlayerCount, Long defaultMapTimeLimit, Long numPlayers,
        String zone, String password) {
        this.id = id;
        this.name = name;
        this.status = status;
        this.ip = ip;
        this.description = description;
        this.alias = alias;
        this.lastCheck = lastCheck;
        this.ue4Port = ue4Port;
        this.zmqPort = zmqPort;
        this.maxPlayers = maxPlayers;
        this.runningVersion = runningVersion;
        this.useCycle = useCycle;
        this.sanctioned = sanctioned;
        this.visible = visible;
        this.pilId = pilId;
        this.lastUse = lastUse;
        this.mchId = mchId;
        this.development = development;
        this.useCustomCycle = useCustomCycle;
        this.chaId = chaId;
        this.maxBots = maxBots;
        this.matchTime = matchTime;
        this.mapCycleLastIndex = mapCycleLastIndex;
        this.shuffle = shuffle;
        this.cyclelist = cyclelist;
        this.overrideMapPlayerCount = overrideMapPlayerCount;
        this.defaultMapTimeLimit = defaultMapTimeLimit;
        this.numPlayers = numPlayers;
        this.zone = zone;
        this.password = password;
    }

    @NotNull
    public String getSrvId() {
        return this.id;
    }

    public void setSrvId(String id) {
        this.id = id;
    }

    @NotNull
    public String getSrvName() {
        return this.name;
    }

    public void setSrvName(String name) {
        this.name = name;
    }

    public String getSrvStatus() {
        return this.status;
    }

    public void setSrvStatus(String status) {
        this.status = status;
    }

    @NotNull
    public String getSrvIp() {
        return this.ip;
    }

    public void setSrvIp(String ip) {
        this.ip = ip;
    }

    public String getSrvDescription() {
        return this.description;
    }

    public void setSrvDescription(String description) {
        this.description = description;
    }

    @NotNull
    public String getSrvAlias() {
        return this.alias;
    }

    public void setSrvAlias(String alias) {
        this.alias = alias;
    }

    public OffsetDateTime getSrvLastCheck() {
        return this.lastCheck;
    }

    public void setSrvLastCheck(OffsetDateTime lastCheck) {
        this.lastCheck = lastCheck;
    }

    public String getSrvUe4Port() {
        return this.ue4Port;
    }

    public void setSrvUe4Port(String ue4Port) {
        this.ue4Port = ue4Port;
    }

    public String getSrvZmqPort() {
        return this.zmqPort;
    }

    public void setSrvZmqPort(String zmqPort) {
        this.zmqPort = zmqPort;
    }

    public Long getSrvMaxPlayers() {
        return this.maxPlayers;
    }

    public void setSrvMaxPlayers(Long maxPlayers) {
        this.maxPlayers = maxPlayers;
    }

    public String getSrvRunningVersion() {
        return this.runningVersion;
    }

    public void setSrvRunningVersion(String runningVersion) {
        this.runningVersion = runningVersion;
    }

    public Boolean getSrvUseCycle() {
        return this.useCycle;
    }

    public void setSrvUseCycle(Boolean useCycle) {
        this.useCycle = useCycle;
    }

    public Boolean getSrvSanctioned() {
        return this.sanctioned;
    }

    public void setSrvSanctioned(Boolean sanctioned) {
        this.sanctioned = sanctioned;
    }

    public Boolean getSrvVisible() {
        return this.visible;
    }

    public void setSrvVisible(Boolean visible) {
        this.visible = visible;
    }

    public String getSrvPilId() {
        return this.pilId;
    }

    public void setSrvPilId(String pilId) {
        this.pilId = pilId;
    }

    public OffsetDateTime getSrvLastUse() {
        return this.lastUse;
    }

    public void setSrvLastUse(OffsetDateTime lastUse) {
        this.lastUse = lastUse;
    }

    public String getSrvMchId() {
        return this.mchId;
    }

    public void setSrvMchId(String mchId) {
        this.mchId = mchId;
    }

    public Boolean getSrvDevelopment() {
        return this.development;
    }

    public void setSrvDevelopment(Boolean development) {
        this.development = development;
    }

    public Boolean getSrvUseCustomCycle() {
        return this.useCustomCycle;
    }

    public void setSrvUseCustomCycle(Boolean useCustomCycle) {
        this.useCustomCycle = useCustomCycle;
    }

    public String getSrvChaId() {
        return this.chaId;
    }

    public void setSrvChaId(String chaId) {
        this.chaId = chaId;
    }

    public Long getSrvMaxBots() {
        return this.maxBots;
    }

    public void setSrvMaxBots(Long maxBots) {
        this.maxBots = maxBots;
    }

    public Long getSrvMatchTime() {
        return this.matchTime;
    }

    public void setSrvMatchTime(Long matchTime) {
        this.matchTime = matchTime;
    }

    public Long getSrvMapCycleLastIndex() {
        return this.mapCycleLastIndex;
    }

    public void setSrvMapCycleLastIndex(Long mapCycleLastIndex) {
        this.mapCycleLastIndex = mapCycleLastIndex;
    }

    public Boolean getSrvShuffle() {
        return this.shuffle;
    }

    public void setSrvShuffle(Boolean shuffle) {
        this.shuffle = shuffle;
    }

    public String getSrvCyclelist() {
        return this.cyclelist;
    }

    public void setSrvCyclelist(String cyclelist) {
        this.cyclelist = cyclelist;
    }

    public Long getSrvOverrideMapPlayerCount() {
        return this.overrideMapPlayerCount;
    }

    public void setSrvOverrideMapPlayerCount(Long overrideMapPlayerCount) {
        this.overrideMapPlayerCount = overrideMapPlayerCount;
    }

    public Long getSrvDefaultMapTimeLimit() {
        return this.defaultMapTimeLimit;
    }

    public void setSrvDefaultMapTimeLimit(Long defaultMapTimeLimit) {
        this.defaultMapTimeLimit = defaultMapTimeLimit;
    }

    public Long getSrvNumPlayers() {
        return this.numPlayers;
    }

    public void setSrvNumPlayers(Long numPlayers) {
        this.numPlayers = numPlayers;
    }

    @Size(max = 25)
    public String getSrvZone() {
        return this.zone;
    }

    public void setSrvZone(String zone) {
        this.zone = zone;
    }

    @Size(max = 75)
    public String getSrvPassword() {
        return this.password;
    }

    public void setSrvPassword(String password) {
        this.password = password;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Server (");

        sb.append(id);
        sb.append(", ").append(name);
        sb.append(", ").append(status);
        sb.append(", ").append(ip);
        sb.append(", ").append(description);
        sb.append(", ").append(alias);
        sb.append(", ").append(lastCheck);
        sb.append(", ").append(ue4Port);
        sb.append(", ").append(zmqPort);
        sb.append(", ").append(maxPlayers);
        sb.append(", ").append(runningVersion);
        sb.append(", ").append(useCycle);
        sb.append(", ").append(sanctioned);
        sb.append(", ").append(visible);
        sb.append(", ").append(pilId);
        sb.append(", ").append(lastUse);
        sb.append(", ").append(mchId);
        sb.append(", ").append(development);
        sb.append(", ").append(useCustomCycle);
        sb.append(", ").append(chaId);
        sb.append(", ").append(maxBots);
        sb.append(", ").append(matchTime);
        sb.append(", ").append(mapCycleLastIndex);
        sb.append(", ").append(shuffle);
        sb.append(", ").append(cyclelist);
        sb.append(", ").append(overrideMapPlayerCount);
        sb.append(", ").append(defaultMapTimeLimit);
        sb.append(", ").append(numPlayers);
        sb.append(", ").append(zone);
        sb.append(", ").append(password);

        sb.append(")");
        return sb.toString();
    }
}
