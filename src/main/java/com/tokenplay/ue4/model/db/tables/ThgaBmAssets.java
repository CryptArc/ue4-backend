/*
 * This file is generated by jOOQ.
 */
package com.tokenplay.ue4.model.db.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import com.tokenplay.ue4.model.db.DefaultSchema;
import com.tokenplay.ue4.model.db.Indexes;
import com.tokenplay.ue4.model.db.Keys;
import com.tokenplay.ue4.model.db.tables.records.BmAssetsRecord;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(value = {
    "http://www.jooq.org", "jOOQ version:3.10.6"}, comments = "This class is generated by jOOQ")
@SuppressWarnings({
    "all", "unchecked", "rawtypes"})
public class Tue4BmAssets extends TableImpl<BmAssetsRecord> {

    private static final long serialVersionUID = -1947223839;

    /**
     * The reference instance of <code>tue4_bm_assets</code>
     */
    public static final Tue4BmAssets BM_ASSETS = new Tue4BmAssets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BmAssetsRecord> getRecordType() {
        return BmAssetsRecord.class;
    }

    /**
     * The column <code>tue4_bm_assets.bm_asset_id</code>.
     */
    public final TableField<BmAssetsRecord, String> BM_ASSET_ID = createField("bm_asset_id", org.jooq.impl.SQLDataType.CHAR(32).nullable(false),
        this, "");

    /**
     * The column <code>tue4_bm_assets.bm_pil_id</code>.
     */
    public final TableField<BmAssetsRecord, String> BM_PIL_ID = createField("bm_pil_id", org.jooq.impl.SQLDataType.CHAR(32), this, "");

    /**
     * The column <code>tue4_bm_assets.bm_default_id</code>.
     */
    public final TableField<BmAssetsRecord, String> BM_DEFAULT_ID = createField("bm_default_id", org.jooq.impl.SQLDataType.CHAR(32).nullable(false),
        this, "");

    /**
     * The column <code>tue4_bm_assets.bm_parent_id</code>.
     */
    public final TableField<BmAssetsRecord, String> BM_PARENT_ID = createField("bm_parent_id", org.jooq.impl.SQLDataType.CHAR(32), this, "");

    /**
     * The column <code>tue4_bm_assets.bm_asset_matchid</code>.
     */
    public final TableField<BmAssetsRecord, String> BM_ASSET_MATCHID = createField("bm_asset_matchid", org.jooq.impl.SQLDataType.VARCHAR(255), this,
        "");

    /**
     * The column <code>tue4_bm_assets.bm_asset_pjson</code>.
     */
    public final TableField<BmAssetsRecord, String> BM_ASSET_PJSON = createField("bm_asset_pjson", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>tue4_bm_assets.created_at</code>.
     */
    public final TableField<BmAssetsRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false)
        .defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>tue4_bm_assets.updated_at</code>.
     */
    public final TableField<BmAssetsRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false)
        .defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>tue4_bm_assets.bm_ord_id</code>.
     */
    public final TableField<BmAssetsRecord, Integer> BM_ORD_ID = createField("bm_ord_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>tue4_bm_assets.bm_ple_id</code>.
     */
    public final TableField<BmAssetsRecord, Integer> BM_PLE_ID = createField("bm_ple_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>tue4_bm_assets</code> table reference
     */
    public Tue4BmAssets() {
        this(DSL.name("tue4_bm_assets"), null);
    }

    /**
     * Create an aliased <code>tue4_bm_assets</code> table reference
     */
    public Tue4BmAssets(String alias) {
        this(DSL.name(alias), BM_ASSETS);
    }

    /**
     * Create an aliased <code>tue4_bm_assets</code> table reference
     */
    public Tue4BmAssets(Name alias) {
        this(alias, BM_ASSETS);
    }

    private Tue4BmAssets(Name alias, Table<BmAssetsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tue4BmAssets(Name alias, Table<BmAssetsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BM_ASSETS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BmAssetsRecord> getPrimaryKey() {
        return Keys.BM_ASSETS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BmAssetsRecord>> getKeys() {
        return Arrays.<UniqueKey<BmAssetsRecord>>asList(Keys.BM_ASSETS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tue4BmAssets as(String alias) {
        return new Tue4BmAssets(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tue4BmAssets as(Name alias) {
        return new Tue4BmAssets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tue4BmAssets rename(String name) {
        return new Tue4BmAssets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tue4BmAssets rename(Name name) {
        return new Tue4BmAssets(name, null);
    }
}
