/*
 * This file is generated by jOOQ.
 */
package com.tokenplay.ue4.model.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import com.tokenplay.ue4.model.db.DefaultSchema;
import com.tokenplay.ue4.model.db.Indexes;
import com.tokenplay.ue4.model.db.Keys;
import com.tokenplay.ue4.model.db.tables.records.PaintSchemeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(value = {
    "http://www.jooq.org", "jOOQ version:3.10.6"}, comments = "This class is generated by jOOQ")
@SuppressWarnings({
    "all", "unchecked", "rawtypes"})
public class Tue4PaintScheme extends TableImpl<PaintSchemeRecord> {

    private static final long serialVersionUID = 405706501;

    /**
     * The reference instance of <code>tue4_paint_scheme</code>
     */
    public static final Tue4PaintScheme PAINT_SCHEME = new Tue4PaintScheme();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaintSchemeRecord> getRecordType() {
        return PaintSchemeRecord.class;
    }

    /**
     * The column <code>tue4_paint_scheme.pis_id</code>.
     */
    public final TableField<PaintSchemeRecord, String> PIS_ID = createField("pis_id", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tue4_paint_scheme.pis_pil_id</code>.
     */
    public final TableField<PaintSchemeRecord, String> PIS_PIL_ID = createField("pis_pil_id", org.jooq.impl.SQLDataType.CLOB.nullable(false), this,
        "");

    /**
     * The column <code>tue4_paint_scheme.pis_name</code>.
     */
    public final TableField<PaintSchemeRecord, String> PIS_NAME = createField("pis_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tue4_paint_scheme.pis_scheme</code>.
     */
    public final TableField<PaintSchemeRecord, String> PIS_SCHEME = createField("pis_scheme", org.jooq.impl.SQLDataType.CLOB.nullable(false), this,
        "");

    /**
     * Create a <code>tue4_paint_scheme</code> table reference
     */
    public Tue4PaintScheme() {
        this(DSL.name("tue4_paint_scheme"), null);
    }

    /**
     * Create an aliased <code>tue4_paint_scheme</code> table reference
     */
    public Tue4PaintScheme(String alias) {
        this(DSL.name(alias), PAINT_SCHEME);
    }

    /**
     * Create an aliased <code>tue4_paint_scheme</code> table reference
     */
    public Tue4PaintScheme(Name alias) {
        this(alias, PAINT_SCHEME);
    }

    private Tue4PaintScheme(Name alias, Table<PaintSchemeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tue4PaintScheme(Name alias, Table<PaintSchemeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_16738_Kue4_PIS_PIL_FK, Indexes.PAINT_SCHEME_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PaintSchemeRecord> getPrimaryKey() {
        return Keys.PAINT_SCHEME_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PaintSchemeRecord>> getKeys() {
        return Arrays.<UniqueKey<PaintSchemeRecord>>asList(Keys.PAINT_SCHEME_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PaintSchemeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PaintSchemeRecord, ?>>asList(Keys.PAINT_SCHEME__Tue4_PAINT_SCHEME_PIS_PIL_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tue4PaintScheme as(String alias) {
        return new Tue4PaintScheme(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tue4PaintScheme as(Name alias) {
        return new Tue4PaintScheme(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tue4PaintScheme rename(String name) {
        return new Tue4PaintScheme(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tue4PaintScheme rename(Name name) {
        return new Tue4PaintScheme(name, null);
    }
}
