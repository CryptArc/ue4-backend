/*
 * This file is generated by jOOQ.
 */
package com.tokenplay.ue4.model.db.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import com.tokenplay.ue4.model.db.DefaultSchema;
import com.tokenplay.ue4.model.db.Indexes;
import com.tokenplay.ue4.model.db.Keys;
import com.tokenplay.ue4.model.db.tables.records.RelationshipRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(value = {
    "http://www.jooq.org", "jOOQ version:3.10.6"}, comments = "This class is generated by jOOQ")
@SuppressWarnings({
    "all", "unchecked", "rawtypes"})
public class Tue4Relationship extends TableImpl<RelationshipRecord> {

    private static final long serialVersionUID = -1336870986;

    /**
     * The reference instance of <code>tue4_relationship</code>
     */
    public static final Tue4Relationship RELATIONSHIP = new Tue4Relationship();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RelationshipRecord> getRecordType() {
        return RelationshipRecord.class;
    }

    /**
     * The column <code>tue4_relationship.rel_pil_id_source</code>.
     */
    public final TableField<RelationshipRecord, String> REL_PIL_ID_SOURCE = createField("rel_pil_id_source",
        org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tue4_relationship.rel_pil_id_target</code>.
     */
    public final TableField<RelationshipRecord, String> REL_PIL_ID_TARGET = createField("rel_pil_id_target",
        org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tue4_relationship.rel_last_update</code>.
     */
    public final TableField<RelationshipRecord, OffsetDateTime> REL_LAST_UPDATE = createField(
        "rel_last_update",
        org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(
            org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>tue4_relationship.rel_status</code>.
     */
    public final TableField<RelationshipRecord, String> REL_STATUS = createField("rel_status", org.jooq.impl.SQLDataType.CLOB.nullable(false), this,
        "");

    /**
     * Create a <code>tue4_relationship</code> table reference
     */
    public Tue4Relationship() {
        this(DSL.name("tue4_relationship"), null);
    }

    /**
     * Create an aliased <code>tue4_relationship</code> table reference
     */
    public Tue4Relationship(String alias) {
        this(DSL.name(alias), RELATIONSHIP);
    }

    /**
     * Create an aliased <code>tue4_relationship</code> table reference
     */
    public Tue4Relationship(Name alias) {
        this(alias, RELATIONSHIP);
    }

    private Tue4Relationship(Name alias, Table<RelationshipRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tue4Relationship(Name alias, Table<RelationshipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_16774_Kue4_REL_PIL__TGT_FK, Indexes.RELATIONSHIP_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RelationshipRecord> getPrimaryKey() {
        return Keys.RELATIONSHIP_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RelationshipRecord>> getKeys() {
        return Arrays.<UniqueKey<RelationshipRecord>>asList(Keys.RELATIONSHIP_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<RelationshipRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RelationshipRecord, ?>>asList(Keys.RELATIONSHIP__Tue4_RELATIONSHIP_REL_PIL_ID_SOURCE_FKEY,
            Keys.RELATIONSHIP__Tue4_RELATIONSHIP_REL_PIL_ID_TARGET_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tue4Relationship as(String alias) {
        return new Tue4Relationship(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tue4Relationship as(Name alias) {
        return new Tue4Relationship(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tue4Relationship rename(String name) {
        return new Tue4Relationship(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tue4Relationship rename(Name name) {
        return new Tue4Relationship(name, null);
    }
}
